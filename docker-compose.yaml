services:
  # Definiert den 'syslog'-Service, welcher für das zentrale Logging über einen Unix Socket verantwortlich ist
  syslog:
    #user: syslog
    # Nutzt das `rsyslog:latest` Image, welches aus dem Dockerfile im angegebenen Kontext erstellt wurde
    image: rsyslog:latest
    # Baut das Docker-Image aus dem Dockerfile, welches sich im ./images/rsyslog Verzeichnis befindet. 
    # Das Dockerfile enthält Anweisungen, die:
    # - von einer leichten Alpine-Base starten
    # - das `rsyslog`-Paket installieren
    # - das Laden des `imklog`-Moduls deaktivieren
    # - und das `imuxsock`-Modul für die Kommunikation über Unix Sockets konfigurieren
    # Das Endresultat ist ein leichtgewichtiger rsyslog-Container
    build:
      context: .
    # Definiert den Hostnamen des Containers als 'syslog'
    hostname: rsyslog
    # Weist dem Container den festen Namen 'syslog' zu, um ihn leicht identifizieren zu können
    container_name: rsyslog
    environment:
    - TZ=Europe/Berlin
    # Bindet Host-Verzeichnisse (Volumen) an bestimmte Pfade im Container, um Persistenz und Datenfreigabe zu ermöglichen:
    # - Das erste Volume bindet das Host-Verzeichnis für die Protokolldateien
    volumes:
    - ./volumes/syslog_vol:/var/log
    # - Das zweite Volume bindet das Host-Verzeichnis, welches den Unix Socket für rsyslog enthält
    - ./volumes/syslog_socket_vol:/run/syslog
